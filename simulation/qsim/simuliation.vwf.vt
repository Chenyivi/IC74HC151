// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2019 20:09:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IC74HC151
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IC74HC151_vlg_sample_tst(
	EN_Part,
	SelectPart,
	Single_Part,
	sampler_tx
);
input  EN_Part;
input [2:0] SelectPart;
input [7:0] Single_Part;
output sampler_tx;

reg sample;
time current_time;
always @(EN_Part or SelectPart or Single_Part)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IC74HC151_vlg_check_tst (
	Y,
	YF,
	sampler_rx
);
input  Y;
input  YF;
input sampler_rx;

reg  Y_expected;
reg  YF_expected;

reg  Y_prev;
reg  YF_prev;

reg  Y_expected_prev;
reg  YF_expected_prev;

reg  last_Y_exp;
reg  last_YF_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Y_prev = Y;
	YF_prev = YF;
end

// update expected /o prevs

always @(trigger)
begin
	Y_expected_prev = Y_expected;
	YF_expected_prev = YF_expected;
end



// expected Y
initial
begin
	Y_expected = 1'bX;
end 

// expected YF
initial
begin
	YF_expected = 1'bX;
end 
// generate trigger
always @(Y_expected or Y or YF_expected or YF)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Y = %b | expected YF = %b | ",Y_expected_prev,YF_expected_prev);
	$display("| real Y = %b | real YF = %b | ",Y_prev,YF_prev);
`endif
	if (
		( Y_expected_prev !== 1'bx ) && ( Y_prev !== Y_expected_prev )
		&& ((Y_expected_prev !== last_Y_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y_exp = Y_expected_prev;
	end
	if (
		( YF_expected_prev !== 1'bx ) && ( YF_prev !== YF_expected_prev )
		&& ((YF_expected_prev !== last_YF_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YF_expected_prev);
		$display ("     Real value = %b", YF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_YF_exp = YF_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IC74HC151_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EN_Part;
reg [2:0] SelectPart;
reg [7:0] Single_Part;
// wires                                               
wire Y;
wire YF;

wire sampler;                             

// assign statements (if any)                          
IC74HC151 i1 (
// port map - connection between master ports and signals/registers   
	.EN_Part(EN_Part),
	.SelectPart(SelectPart),
	.Single_Part(Single_Part),
	.Y(Y),
	.YF(YF)
);

// EN_Part
initial
begin
	EN_Part = 1'b1;
	EN_Part = #80000 1'b0;
end 
// SelectPart[ 2 ]
initial
begin
	SelectPart[2] = 1'bZ;
	SelectPart[2] = #20000 1'b0;
	SelectPart[2] = #40000 1'b1;
	SelectPart[2] = #40000 1'b0;
	SelectPart[2] = #40000 1'b1;
	SelectPart[2] = #40000 1'b0;
end 
// SelectPart[ 1 ]
initial
begin
	SelectPart[1] = 1'bZ;
	SelectPart[1] = #20000 1'b0;
	SelectPart[1] = #20000 1'b1;
	SelectPart[1] = #20000 1'b0;
	SelectPart[1] = #20000 1'b1;
	# 20000;
	repeat(2)
	begin
		SelectPart[1] = 1'b0;
		SelectPart[1] = #20000 1'b1;
		# 20000;
	end
	SelectPart[1] = 1'b0;
end 
// SelectPart[ 0 ]
initial
begin
	SelectPart[0] = 1'bZ;
	SelectPart[0] = #20000 1'b0;
	SelectPart[0] = #10000 1'b1;
	# 10000;
	repeat(2)
	begin
		SelectPart[0] = 1'b0;
		SelectPart[0] = #10000 1'b1;
		# 10000;
	end
	SelectPart[0] = 1'b0;
	SelectPart[0] = #10000 1'b1;
	# 10000;
	repeat(4)
	begin
		SelectPart[0] = 1'b0;
		SelectPart[0] = #10000 1'b1;
		# 10000;
	end
	SelectPart[0] = 1'b0;
end 
// Single_Part[ 7 ]
initial
begin
	Single_Part[7] = 1'b0;
	Single_Part[7] = #10000 1'b1;
	Single_Part[7] = #170000 1'b0;
end 
// Single_Part[ 6 ]
initial
begin
	Single_Part[6] = 1'b0;
end 
// Single_Part[ 5 ]
initial
begin
	Single_Part[5] = 1'b0;
	Single_Part[5] = #10000 1'b1;
	Single_Part[5] = #170000 1'b0;
end 
// Single_Part[ 4 ]
initial
begin
	Single_Part[4] = 1'b0;
end 
// Single_Part[ 3 ]
initial
begin
	Single_Part[3] = 1'b0;
	Single_Part[3] = #10000 1'b1;
	Single_Part[3] = #170000 1'b0;
end 
// Single_Part[ 2 ]
initial
begin
	Single_Part[2] = 1'b0;
end 
// Single_Part[ 1 ]
initial
begin
	Single_Part[1] = 1'b0;
	Single_Part[1] = #10000 1'b1;
	Single_Part[1] = #170000 1'b0;
end 
// Single_Part[ 0 ]
initial
begin
	Single_Part[0] = 1'b0;
end 

IC74HC151_vlg_sample_tst tb_sample (
	.EN_Part(EN_Part),
	.SelectPart(SelectPart),
	.Single_Part(Single_Part),
	.sampler_tx(sampler)
);

IC74HC151_vlg_check_tst tb_out(
	.Y(Y),
	.YF(YF),
	.sampler_rx(sampler)
);
endmodule

